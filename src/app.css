body {
    background-color: #c8d0d2;
}

.container {
    max-width: 900px;
    margin: 1rem 2rem;
}


.card-grid {
    display: grid;
    align-items: center;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
}

.card {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    border-radius: .25rem;
    box-shadow: 0 0 5px 2px rgba(0, 0, 0, .3);
    background-color: white;
    transform-style: preserve-3d;
    transition: 150ms;
    cursor: pointer;
    transform: perspective(1000px) rotateY(var(--rotate-y, 0)) translateY(var(--translate-y, 0));
}

.card:hover {
    --translate-y: -2px;
    box-shadow: 0 0 5px 2px rgba(0, 0, 0, .5);
}


/*With no space, this selector targets any element that has both the card and front classes. The element must have both classes for the styles to be applied.*/
.card.flip {
    --rotate-y: 180deg;
}

/*With no space, this selector targets any element with the class front that is a descendant (i.e., child, grandchild, etc.) of an element with the class card. There can be any level of nesting between the .card and .front elements. likewise with .card and .back.*/
.card .front,
.card .back {
    position: absolute;
    padding: 1rem;
    backface-visibility: hidden;

}

.card .front {
    left: 0;
}

.card .back {
    transform: rotateY(180deg);
    
}

.flashcard-options {
    margin-top: .5rem;
}

.flashcard-option {
    margin-top: .15rem;
    color: #555;
    font-size: .75rem;
}

flashcard-option:first-child {
    margin-top: 0;
}